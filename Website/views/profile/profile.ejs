<head>
	<!-- Stylesheets -->
	<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
	<link rel="stylesheet" href="/stylesheets/profileStyles/profile.css">
	<link rel="stylesheet" href="/stylesheets/connectWalletStyles/connectWalletButton.css">
	<link rel="stylesheet" href="/stylesheets/viewSBT.css">

	<script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js" type="application/javascript"></script>
	<script src="/javascript/walletButton.js"></script>
	<script src="/javascript/profile/profile.js"></script>
	<script src="/javascript/profile/viewAccountSBT.js"></script>
</head>

<body>
	<div class="container__body">
		<div class="container__connectWallet" id="container__connectWallet">
			<div class="container__statusLight" id="container__statusLight">
			</div>
			<p class="text__status" id="text__status">Wallet not connected</p>
		</div>


		<div class="container__mainContents">
			<div class="container__left" id='container__left'>

			</div>
			<div class="container__right" id='container__right'>

			</div>
		</div>
	</div>



	<script type="text/javascript">

		let connectionText, statusLight;
		let userWalletAddress = localStorage.getItem('userWalletAddress');
		let encryptedAttributes = [];

		async function revealAttribute(event) {
			const attributeId = event.target.dataset.attributeId;		
			const decryptedAttribute = await decryptAuthAttribute(userWalletAddress, encryptedAttributes[attributeId]);
			
			if (decryptedAttribute) {
				const revealAttribute = document.getElementById(attributeId);
				revealAttribute.innerHTML = decryptedAttribute;

				const revealButton = event.target; // Get the button element
			    revealButton.style.transition = 'opacity 0.5s'; // Set the transition property

			    // Fade the button to opacity 0
			    revealButton.style.opacity = '0';

			    // Optional: Add a callback to remove the button from the DOM after the fade
			    revealButton.addEventListener('transitionend', function() {
			      revealButton.parentNode.removeChild(revealButton);
			    });
			}

		}


		function editAuthToken() {

		}


		$(async function() { // execute once the DOM has loaded
			clearAuthContainers();
			userWalletAddress = localStorage.getItem('userWalletAddress');

			if (userWalletAddress) {
				setWalletToConnected();

				const accountSBT = await loadAccountSBT('<%- contractAbi %>','<%= contractAddress %>', userWalletAddress);
				console.log("accountSBT: ", accountSBT);
				
				if (accountSBT.tokenURI && accountSBT.SBTData) {
					for (let i = 1; i < accountSBT.SBTData.attributes.length; i++) {
						encryptedAttributes.push(accountSBT.SBTData.attributes[i].value);
					}
					viewAccountSBT(accountSBT.SBTData);
				} 

				else {
					console.error("No Auth token found in wallet.");
				}
			
			} 
		});



		$("#container__connectWallet").click(async function(event) {
			clearAuthContainers();
			userWalletAddress = await setUserWallet();
			setWalletToConnected(userWalletAddress);

			const accountSBT = await loadAccountSBT('<%- contractAbi %>','<%= contractAddress %>', userWalletAddress);
			// const SBTData = await decryptAuthToken(userWalletAddress, accountSBT);
			console.log(accountSBT);

			viewAccountSBT(accountSBT.SBTData);	
		});



		// When the user hovers over container__connectWallet
		$("#container__connectWallet").hover(
		    // If the wallet is not connected, show "Connect Wallet" text and change the status light
		    function() {
		        entersWalletConnect(connectionText);
		    },
		    // When the user stops hovering over the container, show the original text and status light
		    function() {
		        leavesWalletConnect(connectionText, statusLight);
		    }
		);


	</script>

</body>






