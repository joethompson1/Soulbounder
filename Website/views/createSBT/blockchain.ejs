<head>
	<!-- Stylesheets -->
	<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
	<link rel="stylesheet" href="/stylesheets/createSBTStyles/createSBTBlockchain.css">

	<script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js" type="application/javascript"></script>
</head>

<body>
	<div class="container__body">
		<div class="container__tokenStatus">
			<div class="container__statusLight" id="container__statusLight">
			</div>
			<p class="text__status" id="text__status">Not Published</p>
		</div>
		<form class="formContainer">
			<div class="container__mainContents">
				<div class="container__left">
					<div class="container__image">
						<img class="ethereumIcon" src="/images/ethereum.svg">
						<img class="imageSBT" id="imageSBT" src="<%= SBTData.image %>">
					</div>
					<div class="container__dates">
						<div class="container__date">
							<h2 class="dateTitle">Start Date:</h2>
							<p class="dateContents" id=""><%= SBTData.attributes[3].value %></p>
						</div>
						<div class="container__date">
							<h2 class="dateTitle">End Date:</h2>
							<p class="dateContents" id=""><%= SBTData.attributes[4].value %></p>
						</div>
					</div>
				</div>
				<div class="container__right">
					<div class="container__sbtContentsMain">
						<h5 class="SBTOwner">Created By: <a>You</a></h5>
						<h1 class="SBTName" id="SBTName"><%= SBTData.name %></h1>
						<div class="container__SBTType">
							<h5 class="type">Type: </h5>
							<h5 class="SBTType"><%= SBTData.attributes[0].value %></h5>
						</div>
						<div class="container__createButton" id="submitButton">
							<img class="sendIcon" src="/images/send.svg">
						</div>
						<div class="container__createButtonBubble">
							<div class="pointer"></div>
							<h5>Publish</h5>
						</div>
					</div>

					<div class="container__attribute" id="description">
						<div class="container__description-title">
							<img class="descriptionIcon" src="/images/description.svg">
							<h2 class="descriptionTitle">Description</h2>
						</div>
						<div class="container__description-contents">
							<p class="descriptionContents" id=""><%= SBTData.description %></p>
						</div>
					</div>

					<div class="container__attribute">
						<div class="container__description-title dropDownCursor" onclick="hideContents('location')">
							<img class="descriptionIcon" src="/images/location.svg">
							<h2 class="descriptionTitle">Location</h2>
							<img class="arrowDropDown" src="/images/arrowDropDown.svg">
						</div>
						<div class="container__description-contents dropDown" id="location">
							<div class="container__location">
								<p class="locationTrait"><%= SBTData.attributes[1].trait_type %>: </p>
								<p class="" id=""><%= SBTData.attributes[1].value %></p>
							</div>
							<div class="container__location">
								<p class="locationTrait"><%= SBTData.attributes[2].trait_type %>: </p>
								<p class="" id=""><%= SBTData.attributes[2].value %></p>
							</div>
						</div>
					</div>

					<div class="container__attribute">
						<div class="container__description-title dropDownCursor" onclick="hideContents('website')">
							<img class="descriptionIcon" src="/images/website.svg">
							<h2 class="descriptionTitle">Website</h2>
							<img class="arrowDropDown" src="/images/arrowDropDown.svg">
						</div>
						<div class="container__description-contents dropDown" id="website">
							<a href="https://<%= SBTData.attributes[3].value %>" target=”_blank” class="" id=""><%= SBTData.attributes[5].value %></a>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>



	<script type="text/javascript">
		const showAccount = document.querySelector('.showAccount');

		$(function() // execute once the DOM has loaded
		{

			// wire up Add Item button click event
			$("#submitButton").click(async function(event) {
				event.preventDefault(); // cancel default behavior

				const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
				const userWalletAddress = accounts[0];
				const provider = new ethers.providers.Web3Provider(window.ethereum);
				const signer = provider.getSigner(userWalletAddress);
				// showAccount.innerHTML = userWalletAddress;

				const networkId = await window.ethereum.request({ method: 'net_version' });
				const contractNetworkId = "<%= contractNetworkId %>"

				let tokenIds = []


				if (contractNetworkId == networkId) {
					const textStatus = document.querySelector('.text__status');
					textStatus.innerHTML = "Publishing..."
					document.getElementById('container__statusLight').style.background = "orange";

					let contractAbi = '<%- contractAbi %>';
					const contractAddress = "<%= contractAddress %>";

					const contract = new ethers.Contract(contractAddress, contractAbi, signer);

					// let walletBalance = await contract.balanceOf(userWalletAddress);
					// console.log(walletBalance.toNumber());

					try {
						let mintResult = await contract.safeMint(userWalletAddress, "<%= sbtHash %>");
						console.log(mintResult);

						let txReceipt = await provider.getTransactionReceipt(mintResult.hash);
						console.log(txReceipt);

						while (!txReceipt && !txReceipt.blockNumber) {
							console.log("waiting: "+txReceipt);
							txReceipt = await provider.getTransactionReceipt(mintResult.hash);
						}

						textStatus.innerHTML = "Published"
						document.getElementById('container__statusLight').style.background = "green";

						// location.href = "/library/viewSBT?hash=<%= sbtHash %>";
						window.location.assign(
						  "/profile"
						);


					} catch(error) {

						textStatus.innerHTML = "Unpublished (Error: "+error.message+"("+error.code+")";
						document.getElementById('container__statusLight').style.background = "red";
					}


					// walletBalance = await contract.balanceOf(userWalletAddress);
					// console.log(walletBalance.toString());


					// for (var i=0; i < walletBalance.toString(); i++) {
					// 	const tokenId = await contract.tokenURI(i);
					// 	tokenIds.push(tokenId);
					// }

					// console.log(tokenIds);

				} else {
					window.alert("Smart contract not deployed to detected network!");
				}
		  	});
		});




		function hideContents(contentId) {
			document.getElementById(contentId).classList.toggle('show');
		}


	</script>

</body>






