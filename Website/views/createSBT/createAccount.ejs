<head>
	<!-- Stylesheets -->
	<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
	<link rel="stylesheet" href="/stylesheets/createSBTStyles/createAccount.css">
	<link rel="stylesheet" href="/stylesheets/logoStyles/logoLoadingAnimation.css">

	<script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js" type="application/javascript"></script>
	<script src="/javascript/createAccount/createAccount.js"></script>
	<!-- <script src="/javascript/walletButton.js"></script> -->
</head>

<body>
	<div class="container__loading text-center hide" id="loadingContainer">
		<div class="container loadingContainer">
			<%- include('../components/logoLoadingAnimation.ejs') %>
		</div>
		<div class="container loadingTextContainer" style="width: max-content;">
			<h1 id="loadingText">Requesting public key...</h1>	
		</div>
	</div>

	<div class="container__body" id="container__body">

		<div class="container__connectWallet" id="container__connectWallet">
			<div class="text__background" id="text__background">
				<div class="container__statusLight" id="container__statusLight">
				</div>
				<p class="text__status" id="text__status">Not Published</p>
			</div>
		</div>
		<form class="formContainer" id="formContainer">
			<div class="container__mainContents">
				<div class="container__left">
					<div class="container__image">
						<img class="ethereumIcon" src="/images/ethereum.svg">
						<div class="SBTPictureContainer">
							<label id="imageLabel" class="imageLabel" for="fileInput">
								<img class="SBTDisplayPicture" id="stockImage" src="/images/handWithPicture.png">
								<img class="displayImage" src="#" id="displayImage">
							</label>

							<input id="fileInput" type="file" onchange="readURL(this);" name="image" accept="image/png, image/jpeg, image/gif" >
							<input class="SBTPicture" type="text" name="SBTPicture" id='SBTPicture'>
						</div>
					</div>
					
				</div>
				<div class="container__right" id="container__right">
					<div class="container__sbtContentsMain">
						<input class="SBTName" type="text" name="SBTName" placeholder="Username" id="SBTName" required>
						<div class="container__SBTType">
							<h5 class="type">Type: </h5>
							<h5 class="SBTType">Account</h5>
						</div>
						<button class="container__createButton" id="submitButton" type="submit">
							<img class="sendIcon" src="/images/send.svg">
							<div class="container__createButtonBubble">
								<div class="pointer"></div>
								<h5>Publish</h5>
							</div>
						</button>
					</div>


					<div class="container__attribute" id="description">
						<div class="container__description-title">
							<img class="descriptionIcon" src="/images/email.svg">
							<h2 class="descriptionTitle">Email</h2>
						</div>
						<div class="container__description-contents">
							<input class="descriptionContents" type="email" id="emailContents" required>
						</div>
					</div>

					<div class="repeatingInputContainers" id="repeatingInputContainer">				
					</div>

					<div class="container__attribute" id="createCustomAttribute">
						<div class="container__description-title">
							<img class="descriptionIcon" src="/images/plus-square.svg">
							<h2 class="descriptionTitle">Add Custom Attribute</h2>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>




	<script type="text/javascript">
		const createInputButton = document.querySelector('#createCustomAttribute');
		var numberOfCustomInputs = 0;

		createInputButton.addEventListener('click', (e) => {
			createCustomAttributes(numberOfCustomInputs);
		});


		$(function() { // execute once the DOM has loaded
			
			const form = document.getElementById('formContainer');
			const imageInput = document.getElementById('fileInput');
			const imageLabel = document.getElementById('imageLabel');

			// Checks if input elements have been filled
			document.addEventListener('invalid', function (e) {
				e.preventDefault();
			  	var firstInvalidElement = e.target.form.querySelector(':invalid');
			  	firstInvalidElement.focus();
			}, true);

			// wire up button click event
			form.addEventListener('submit', async (event) => {
				event.preventDefault(); // cancel default behavior

				if (imageInput.files.length == 0) { // Checks if image file is uploaded
					imageLabel.classList.add('invalidImage');
				
				} else { // If image file has been uploaded

					const textStatus = document.querySelector('.text__status');
					textStatus.innerHTML = "Publishing..."
					document.getElementById('container__statusLight').style.background = "orange";

					startLoadingAnimation();

					if (!window.ethereum) {
						console.error("Metamask wallet not detected.");
						const error = new Error("Metamask wallet not detected.");
						revertLoadingAnimation();
						handleError(error);
						return;
					}

					const networkVersion = ethereum.networkVersion;
					if (networkVersion != 5777) { // Checks user has Ganache selected as their network
						console.error("Wrong blockchain network selected.");
						const error = new Error("Wrong blockchain network selected.");
						revertLoadingAnimation();
						handleError(error);
						return;
					}

					// Connect to users wallet
					const userWalletAddress = await setUserWallet();

					// Request access to users public key
					let keyB64 = await getUsersPublicKey(userWalletAddress);

					setLoadingText("Uploading data to Interplanetary File System...");

					const SBTData = compileSBTData();

					if (!SBTData) { // Error compiling SBT data from form
						return 
					}

					// Upload SBT metadata to IPFS
					let data = await uploadToIPFS(SBTData, keyB64);

					if (!data) { // Error in uploading data to IPFS
						return;
					}

					setLoadingText("Minting token...");
					let contractAbi = '<%- contractAbi %>';
					const contractAddress = "<%= contractAddress %>";
					await mintToken(userWalletAddress, contractAbi, contractAddress, data);

					window.location.assign("/profile");

				}
				
		  	});
		});
	</script>
</body>